## Check minimum Snakemake version

from snakemake.utils import min_version

min_version("5.20.1")

## Import required libraries
import os
import glob
import re 

## Configuration check

if len(config) == 0:
    
    sys.exit(
        f"Please specify the path to the input directory with --config INPUT='path/to/input'."
    )


## Parse Input directory

INPUT_DIR = os.path.normpath(config["INPUT"])
DATA_TYPE = os.path.basename(INPUT_DIR)

SAMPLES = [ sample for sample in os.listdir(f"{INPUT_DIR}/polyploids") if sample != "control_genome" ]
PROGENITORS = os.listdir(f"{INPUT_DIR}/progenitors") 

# get file count and list within sample directories

sample_files = {}
for sample in SAMPLES:

    sample_dir = os.path.join(f"{INPUT_DIR}/polyploids", sample)
    
    files  = os.listdir(sample_dir)

    sample_files[sample] = files

# get all read files
patterns = [
        f"{INPUT_DIR}/polyploids/**/*.fastq",
        f"{INPUT_DIR}/polyploids/**/*.fasta",
        f"{INPUT_DIR}/polyploids/**/*.fna",
        f"{INPUT_DIR}/polyploids/**/*.fq",
        f"{INPUT_DIR}/polyploids/**/*.fa",
        f"{INPUT_DIR}/polyploids/**/*.fastq.gz",
        f"{INPUT_DIR}/polyploids/**/*.fasta.gz",
        f"{INPUT_DIR}/polyploids/**/*.fna.gz",
        f"{INPUT_DIR}/polyploids/**/*.fq.gz",
        f"{INPUT_DIR}/polyploids/**/*.fa.gz",
    ]
all_read_files = [] 
for pattern in patterns:
        all_read_files.extend(glob.glob(pattern, recursive=True))


### Make wildcard constraints ###
import re
sample_regex = "|".join(re.escape(sample) for sample in SAMPLES)
progenitor_regex = "|".join(re.escape(progenitor) for progenitor in PROGENITORS)

wildcard_constraints:
    sample = sample_regex,
    progenitor = progenitor_regex


### Rules ###

include: "rules/RNA_alignment.smk"
include: "rules/input_functions.smk"
include: "rules/quality_check.smk"

rule all:
    input:
        "results/MultiQC/multiqc_report.html"
